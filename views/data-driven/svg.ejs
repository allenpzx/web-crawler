<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>SVG</title>
    <style>
        .chart rect {
            fill: steelblue;
        }

        .chart text {
            fill: white;
            font: 10px sans-serif;
            text-anchor: end;
        }

        button {
            border: none;
            background-color: steelblue;
            border-radius: 24px;
            color: white;
            padding: 1rem 4rem;
            margin: 0 auto;
        }
    </style>
</head>

<body>

    <svg class='chart'></svg>

    <script src="https://d3js.org/d3.v5.min.js" charset="utf-8"></script>
    <script>
        
        let width = window.innerWidth,
            height = parseInt(window.innerHeight * 0.5)

        d3.select('.chart')
            .style('width', width)
            .style('height', height)
            .append("circle")
            .attr("cx", width*0.5)
            .attr("cy", height*0.3)
            .attr("r", 0)
            .transition()
            .duration(1000)
            .style('r', 100);

        // const type = d => parseInt(d.value);
        // let data = [];
        // d3.tsv("/data.tsv", type, (d) => {
        //     data.push(d);
        // }).then(() => draw());

        // let direction = 'column';
        // let isRow = direction === 'row';
        // const toggle = async () =>{
        //     if(direction === 'row'){
        //         direction = 'column'
        //         await clean()
        //         draw()
        //     }else{
        //         direction = 'row'
        //         await clean()
        //         draw()
        //     };
        // }

        // const clean = () => new Promise((resolve)=>{
        //     d3.select('.chart').remove()
        //     resolve()
        // });

        // const draw = () => {
        //     let margin = {top: 20, right: 30, bottom: 30, left: 40},
        //         width = 420,
        //         height = parseInt(window.innerHeight / 2),
        //         barHeight = 20;
        //         barWidth = parseFloat(window.innerWidth * 0.5 / data.length)

        //     let radio = isRow ?
        //         d3.scaleLinear()
        //         .domain([0, d3.max(data, d => parseInt(d.value))])
        //         .range([0, width]) :
        //         d3.scaleLinear()
        //         .domain([0, d3.max(data, d => parseInt(d.value))])
        //         .range([height, 0]);

        //     let chart = isRow ?
        //         d3.select(".chart")
        //         .attr("width", width)
        //         .attr("height", barHeight * data.length) :
        //         d3.select(".chart")
        //         .attr("height", height)
        //         .attr('width', barWidth * data.length);

        //     var bar = chart.selectAll("g")
        //         .data(data)
        //         .transition().duration(1000)
        //         .enter().append("g")
        //         .attr("transform", function (d, i) {
        //             const va = isRow ? "translate(0," + i * barHeight + ")" : "translate(" + i * barWidth +
        //                 ",0)";
        //             return va;
        //         });

        //     if (isRow) {
        //         bar.append("rect")
        //             .attr("width", function (d) {
        //                 return radio(d.value);
        //             })
        //             .attr("height", barHeight - 1);

        //         bar.append("text")
        //             .attr("x", function (d) {
        //                 return radio(d.value) - 3;
        //             })
        //             .attr("y", barHeight / 2)
        //             .attr("dy", ".35em")
        //             .text(function (d) {
        //                 return d.value;
        //             });
        //     } else {
        //         bar.append("rect")
        //             .attr('y', d=>radio(d.value))
        //             .attr("height", d=>(height - radio(d.value)))
        //             .attr("width", barWidth - 1);

        //         bar.append("text")
        //             .attr("x", barWidth/2)
        //             .attr("y", (d)=>radio(d.value)+3)
        //             .attr("dy", ".75em")
        //             .text(d=>d.value);
        //     }
        // }
    </script>
</body>

</html>